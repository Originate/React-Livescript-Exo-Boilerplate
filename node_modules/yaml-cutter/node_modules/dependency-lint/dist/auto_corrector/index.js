(function() {
  var AutoCorrector, _, fsExtra, path;

  _ = require('lodash');

  fsExtra = require('fs-extra');

  path = require('path');

  AutoCorrector = (function() {
    function AutoCorrector() {}

    AutoCorrector.prototype.correct = function(arg, done) {
      var changes, dir, packageJson, results;
      dir = arg.dir, packageJson = arg.packageJson, results = arg.results;
      changes = this.getChanges(results);
      if (changes.length > 0) {
        return this.applyChanges({
          changes: changes,
          dir: dir,
          packageJson: packageJson
        }, done);
      } else {
        return done();
      }
    };

    AutoCorrector.prototype.getChanges = function(results) {
      var change, changes, i, len, module, modules, type;
      changes = [];
      for (type in results) {
        modules = results[type];
        for (i = 0, len = modules.length; i < len; i++) {
          module = modules[i];
          change = this.getChange({
            module: module,
            type: type
          });
          if (change) {
            changes.push(change);
            module.fixed = true;
          }
        }
      }
      return changes;
    };

    AutoCorrector.prototype.getChange = function(arg) {
      var module, newType, type;
      module = arg.module, type = arg.type;
      switch (module.error) {
        case 'should be dependency':
        case 'should be devDependency':
          newType = type === 'dependencies' ? 'devDependencies' : 'dependencies';
          return function(packageJson) {
            var version;
            version = packageJson[type][module.name];
            delete packageJson[type][module.name];
            packageJson[newType] || (packageJson[newType] = {});
            return packageJson[newType][module.name] = version;
          };
        case 'unused':
          return function(packageJson) {
            return delete packageJson[type][module.name];
          };
      }
    };

    AutoCorrector.prototype.applyChanges = function(arg, done) {
      var change, changes, dir, i, len, packageJson, packageJsonPath, updatedPackageJson;
      changes = arg.changes, dir = arg.dir, packageJson = arg.packageJson;
      updatedPackageJson = _.cloneDeep(packageJson);
      for (i = 0, len = changes.length; i < len; i++) {
        change = changes[i];
        change(updatedPackageJson);
      }
      packageJsonPath = path.join(dir, 'package.json');
      return fsExtra.writeJson(packageJsonPath, updatedPackageJson, done);
    };

    return AutoCorrector;

  })();

  module.exports = AutoCorrector;

}).call(this);
