// Generated by LiveScript 1.5.0
var yaml, ref$, compact, elemIndex, YamlHashInserter;
yaml = require('js-yaml');
ref$ = require('prelude-ls'), compact = ref$.compact, elemIndex = ref$.elemIndex;
YamlHashInserter = (function(){
  YamlHashInserter.displayName = 'YamlHashInserter';
  var prototype = YamlHashInserter.prototype, constructor = YamlHashInserter;
  function YamlHashInserter(text){
    this.text = text;
    this.lines = this.text.split('\n');
    this.data = yaml.safeLoad(this.text);
    this.cursorLine = 0;
    this.cursorIndentation = '';
    this.currentJsonChildren = this.data;
  }
  YamlHashInserter.prototype.insertHash = function(arg$){
    var root, key, value, i$, ref$, len$, keySegment;
    root = arg$.root, key = arg$.key, value = arg$.value;
    for (i$ = 0, len$ = (ref$ = this.keySegments(root)).length; i$ < len$; ++i$) {
      keySegment = ref$[i$];
      this.goToChild(keySegment);
    }
    this.insertBranchKey(key);
    return this.insertLeaf(value);
  };
  YamlHashInserter.prototype.toString = function(){
    return this.lines.join("\n");
  };
  YamlHashInserter.prototype.goToChild = function(childName){
    var indentation, lineText, i$, to$, lineNo;
    indentation = this.cursorLine > 0 ? this.cursorIndentation + "  " : '';
    lineText = indentation + "" + childName + ":";
    for (i$ = this.cursorLine, to$ = this.lines.length; i$ <= to$; ++i$) {
      lineNo = i$;
      if (this.lines[lineNo] === lineText) {
        if (this.cursorLine !== 0) {
          this.indentCursor();
        }
        this.cursorLine = lineNo;
        this.currentJsonChildren = this.currentJsonChildren[childName];
        return;
      }
    }
  };
  YamlHashInserter.prototype.goToNextEmptyLine = function(){
    var ref$, results$ = [];
    while (((ref$ = this.lines[this.cursorLine]) != null ? ref$.trim() : void 8) !== '' && this.cursorLine < this.lines.length) {
      results$.push(this.cursorLine += 1);
    }
    return results$;
  };
  YamlHashInserter.prototype.hasChild = function(childName){
    var ref$;
    return !!((ref$ = this.currentJsonChildren) != null && ref$[childName]);
  };
  YamlHashInserter.prototype.insertBranchKey = function(keySegment){
    var childNames, ref$, parentIndex, parent;
    if (this.hasChild(keySegment)) {
      return this.goToChild(keySegment);
    } else {
      childNames = Object.keys((ref$ = this.currentJsonChildren) != null
        ? ref$
        : []);
      childNames.push(keySegment);
      childNames.sort();
      parentIndex = childNames.indexOf(keySegment) + 1;
      parent = childNames[parentIndex];
      if (parent) {
        this.goToChild(parent);
      } else {
        this.goToNextEmptyLine();
        this.indentCursor();
      }
      return this.insertLine(keySegment + ":");
    }
  };
  YamlHashInserter.prototype.insertLine = function(text){
    return this.lines.splice(this.cursorLine, 0, this.cursorIndentation + "" + text);
  };
  YamlHashInserter.prototype.insertLeaf = function(hash){
    var key, value, results$ = [];
    this.cursorLine += 1;
    for (key in hash) {
      value = hash[key];
      results$.push(this.insertLine(this.cursorIndentation + "" + key + ": " + value));
    }
    return results$;
  };
  YamlHashInserter.prototype.indentCursor = function(){
    return this.cursorIndentation += '  ';
  };
  YamlHashInserter.prototype.keySegments = function(key){
    return compact(
    key.split('.'));
  };
  return YamlHashInserter;
}());
module.exports = YamlHashInserter;