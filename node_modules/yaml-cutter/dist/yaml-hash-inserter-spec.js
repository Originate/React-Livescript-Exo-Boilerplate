// Generated by LiveScript 1.5.0
var expect, jsdiffConsole, YamlHashInserter;
expect = require('chai').expect;
jsdiffConsole = require('jsdiff-console');
YamlHashInserter = require('./yaml-hash-inserter');
describe('YamlHashInserter', function(){
  beforeEach(function(){
    return this.editor = new YamlHashInserter("name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  web:\n    location: ./web-server\n\nmodules:");
  });
  describe('insert', function(){
    it('inserts the given value at the given yaml path', function(){
      var expectedText;
      this.editor.insertHash({
        root: 'services',
        key: 'users',
        value: {
          location: './users'
        }
      });
      expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  users:\n    location: ./users\n  web:\n    location: ./web-server\n\nmodules:";
      return jsdiffConsole(this.editor.toString(), expectedText);
    });
    context('the parent node has no children', function(){
      return it('inserts the given value', function(done){
        var expectedText;
        this.editor.insertHash({
          root: 'modules',
          key: 'users',
          value: {
            location: './users'
          }
        });
        expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  web:\n    location: ./web-server\n\nmodules:\n  users:\n    location: ./users";
        return jsdiffConsole(this.editor.toString(), expectedText, done);
      });
    });
    return context('inserting as the last child', function(){
      return it('inserts the given value', function(done){
        var expectedText;
        this.editor.insertHash({
          root: 'services',
          key: 'zebra',
          value: {
            location: './zebra'
          }
        });
        expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  web:\n    location: ./web-server\n  zebra:\n    location: ./zebra\n\nmodules:";
        return jsdiffConsole(this.editor.toString(), expectedText, done);
      });
    });
  });
  describe('go-to-child', function(){
    return context('at root node', function(){
      beforeEach(function(){
        return this.editor.goToChild('services');
      });
      it('goes to the given child node', function(){
        return expect(this.editor.cursorLine).to.equal(4);
      });
      it('does not indent the cursor', function(){
        return expect(this.editor.cursorIndentation).to.equal('');
      });
      return it('updates the current json children', function(done){
        var expected;
        expected = {
          dashboard: {
            location: './dashboard'
          },
          web: {
            location: './web-server'
          }
        };
        return jsdiffConsole(this.editor.currentJsonChildren, expected, done);
      });
    });
  });
  describe('go-to-next-empty-line', function(){
    it('goes to the next empty line', function(){
      this.editor.goToNextEmptyLine();
      expect(this.editor.cursorLine).to.equal(3);
      this.editor.cursorLine += 1;
      this.editor.goToNextEmptyLine();
      expect(this.editor.cursorLine).to.equal(9);
      this.editor.cursorLine += 1;
      this.editor.goToNextEmptyLine();
      return expect(this.editor.cursorLine).to.equal(11);
    });
    return context('at branch node', function(){
      beforeEach(function(){
        this.editor.goToChild('services');
        return this.editor.goToChild('web');
      });
      it('goes to the given child node', function(){
        return expect(this.editor.cursorLine).to.equal(7);
      });
      it('indents the cursor', function(){
        return expect(this.editor.cursorIndentation).to.equal('  ');
      });
      return it('updates the current json children', function(done){
        var expected;
        expected = {
          location: './web-server'
        };
        return jsdiffConsole(this.editor.currentJsonChildren, expected, done);
      });
    });
  });
  describe('has-child', function(){
    it('returns true if the given child exists', function(){
      return expect(this.editor.hasChild('services')).to.be['true'];
    });
    it('returns false if the given child does not exist', function(){
      return expect(this.editor.hasChild('zonk')).to.be['false'];
    });
    return it('returns false if the current node has no children', function(){
      this.editor.goToChild('modules');
      return expect(this.editor.hasChild('nope')).to.be['false'];
    });
  });
  describe('insert-line', function(){
    return context('at a branch level', function(){
      beforeEach(function(){
        this.editor.goToChild('services');
        return this.editor.insertLine('foo');
      });
      return it('inserts the given line', function(done){
        var expectedText;
        expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nfoo\nservices:\n  dashboard:\n    location: ./dashboard\n  web:\n    location: ./web-server\n\nmodules:";
        return jsdiffConsole(this.editor.toString(), expectedText, done);
      });
    });
  });
  describe('insert-branch-key', function(){
    return context('at branch node', function(){
      beforeEach(function(){
        this.editor.goToChild('services');
        return this.editor.insertBranchKey('users');
      });
      it('inserts the given key', function(done){
        var expectedText;
        expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  users:\n  web:\n    location: ./web-server\n\nmodules:";
        return jsdiffConsole(this.editor.toString(), expectedText, done);
      });
      it('moves to the inserted line', function(){
        return expect(this.editor.cursorLine).to.equal(7);
      });
      return it('increases the cursor indentation', function(){
        return expect(this.editor.cursorIndentation).to.equal('  ');
      });
    });
  });
  describe('insert-leaf', function(){
    beforeEach(function(){
      this.editor.goToChild('services');
      this.editor.insertBranchKey('users');
      return this.editor.insertLeaf({
        location: './users'
      });
    });
    return it('inserts the given data', function(done){
      var expectedText;
      expectedText = "name: Example application\ndescription: An example app\nversion: 1.0\n\nservices:\n  dashboard:\n    location: ./dashboard\n  users:\n    location: ./users\n  web:\n    location: ./web-server\n\nmodules:";
      return jsdiffConsole(this.editor.toString(), expectedText, done);
    });
  });
  return describe('key-segments', function(){
    return it('returns an array of key elements', function(){
      expect(this.editor.keySegments('beta')).to.eql(['beta']);
      return expect(this.editor.keySegments('alpha.beta.gamma')).to.eql(['alpha', 'beta', 'gamma']);
    });
  });
});