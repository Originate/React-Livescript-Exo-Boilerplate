// Generated by LiveScript 1.5.0
var async, EventEmitter, fs, path, ref$, difference, find, filter, reject, each, yaml, AppLinter;
async = require('async');
EventEmitter = require('events').EventEmitter;
fs = require('fs');
path = require('path');
ref$ = require('prelude-ls'), difference = ref$.difference, find = ref$.find, filter = ref$.filter, reject = ref$.reject, each = ref$.each;
yaml = require('js-yaml');
AppLinter = (function(superclass){
  var prototype = extend$((import$(AppLinter, superclass).displayName = 'AppLinter', AppLinter), superclass).prototype, constructor = AppLinter;
  function AppLinter(appConfig){
    this.appConfig = appConfig;
  }
  AppLinter.prototype.start = function(){
    var ref$, sentMessages, receivedMessages;
    ref$ = this.aggregateMessages(), sentMessages = ref$.sentMessages, receivedMessages = ref$.receivedMessages;
    this.emit('reset-colors', Object.keys(this.appConfig.services));
    return this.lintMessages(sentMessages, receivedMessages);
  };
  AppLinter.prototype.lintMessages = function(sent, received){
    var notReceived, notSent, i$, len$, msg, results$ = [];
    notReceived = difference(Object.keys(sent), Object.keys(received));
    notSent = difference(Object.keys(received), Object.keys(sent));
    if (notReceived.length === 0 && notSent.length === 0) {
      return this.emit('lint-success');
    }
    if (notReceived.length) {
      this.emit('output', {
        name: 'exo lint',
        text: "The following messages are sent but not received:"
      });
      for (i$ = 0, len$ = notReceived.length; i$ < len$; ++i$) {
        msg = notReceived[i$];
        this.emit('output', {
          name: sent[msg],
          text: msg
        });
      }
    }
    if (notSent.length) {
      this.emit('output', {
        name: 'exo lint',
        text: "The following messages are received but not sent:"
      });
      for (i$ = 0, len$ = notSent.length; i$ < len$; ++i$) {
        msg = notSent[i$];
        results$.push(this.emit('output', {
          name: received[msg],
          text: msg
        }));
      }
      return results$;
    }
  };
  AppLinter.prototype.aggregateMessages = function(){
    var sentMessages, receivedMessages, serviceName, serviceConfig, i$, ref$, len$, message;
    sentMessages = {};
    receivedMessages = {};
    for (serviceName in this.appConfig.services) {
      serviceConfig = this.getConfig(serviceName);
      for (i$ = 0, len$ = (ref$ = serviceConfig.messages.sends || []).length; i$ < len$; ++i$) {
        message = ref$[i$];
        (sentMessages[message] || (sentMessages[message] = [])).push(serviceName);
      }
      for (i$ = 0, len$ = (ref$ = serviceConfig.messages.receives || []).length; i$ < len$; ++i$) {
        message = ref$[i$];
        (receivedMessages[message] || (receivedMessages[message] = [])).push(serviceName);
      }
    }
    return {
      sentMessages: sentMessages,
      receivedMessages: receivedMessages
    };
  };
  AppLinter.prototype.getConfig = function(serviceName){
    var serviceRoot;
    serviceRoot = path.join(process.cwd(), this.appConfig.services[serviceName].location);
    return yaml.safeLoad(fs.readFileSync(path.join(serviceRoot, 'service.yml'), 'utf8'));
  };
  return AppLinter;
}(EventEmitter));
module.exports = AppLinter;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}