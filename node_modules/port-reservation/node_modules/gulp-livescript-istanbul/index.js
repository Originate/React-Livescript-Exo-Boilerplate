(function(){
  var cliColor, readFileSync, ref$, Collector, hook, Instrumenter, Report, utils, livescript, compile, path, capitalize, each, filter, keys, map, Obj, objToPairs, pairsToObj, SourceMapConsumer, through, coverageVariable, transpile, instrumentCode, LivescriptInstrumenter;
  cliColor = require('cli-color');
  readFileSync = require('fs').readFileSync;
  ref$ = require('istanbul'), Collector = ref$.Collector, hook = ref$.hook, Instrumenter = ref$.Instrumenter, Report = ref$.Report, utils = ref$.utils;
  livescript = require('livescript'), compile = livescript.compile;
  path = require('path');
  ref$ = require('prelude-ls'), capitalize = ref$.capitalize, each = ref$.each, filter = ref$.filter, keys = ref$.keys, map = ref$.map, Obj = ref$.Obj, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj;
  SourceMapConsumer = require('source-map').SourceMapConsumer;
  through = require('through2').obj;
  coverageVariable = "$$cov_" + Date.now() + "$$";
  global[coverageVariable] = {};
  transpile = function(){
    var cache;
    cache = {};
    return function(fullPath, originalCode){
      var ref$, code, map;
      if (!!cache[fullPath]) {
        return cache[fullPath];
      }
      if (typeof originalCode === 'undefined') {
        return null;
      }
      ref$ = compile(originalCode, {
        map: 'embedded',
        filename: fullPath
      }), code = ref$.code, map = ref$.map;
      return cache[fullPath] = {
        compiledCode: code,
        sourceMap: JSON.parse(JSON.stringify(map))
      };
    };
  }();
  instrumentCode = function(){
    var cache;
    cache = {};
    return function(fullPath, instrumenter, code){
      var instrumentedCode, result;
      if (!!cache[fullPath]) {
        return cache[fullPath];
      }
      if (typeof instrumenter === 'undefined') {
        return null;
      }
      instrumentedCode = instrumenter.instrumentSync(code, fullPath);
      result = /\{.*"path".*"fnMap".*"statementMap".*"branchMap".*\}/g.exec(instrumentedCode)[0];
      return cache[fullPath] = {
        coverageJson: JSON.parse(result),
        instrumentedCode: instrumentedCode
      };
    };
  }();
  LivescriptInstrumenter = (function(superclass){
    var prototype = extend$((import$(LivescriptInstrumenter, superclass).displayName = 'LivescriptInstrumenter', LivescriptInstrumenter), superclass).prototype, constructor = LivescriptInstrumenter;
    prototype.instrumentSync = function(livescriptCode, fullPath){
      var compiledCode;
      compiledCode = transpile(fullPath, livescriptCode).compiledCode;
      return superclass.prototype.instrumentSync.call(this, compiledCode, fullPath);
    };
    prototype.getPreamble = function(){
      var ref$, path, statementMap, branchMap, fnMap, sourceMapConsumer, _fixLocation;
      ref$ = this.coverState, path = ref$.path, statementMap = ref$.statementMap, branchMap = ref$.branchMap, fnMap = ref$.fnMap;
      sourceMapConsumer = new SourceMapConsumer(transpile(path).sourceMap);
      _fixLocation = function(location){
        var start, end;
        start = location.start, end = location.end;
        location.start = sourceMapConsumer.originalPositionFor(start);
        location.end = sourceMapConsumer.originalPositionFor(end);
        if (location.start.source !== path) {
          location.start = {
            line: 0,
            column: 0
          };
          location.end = {
            line: 0,
            column: 0
          };
          location.skip = true;
        }
        return location;
      };
      Obj.map(_fixLocation)(
      statementMap);
      Obj.map(function(branch){
        var locations;
        locations = branch.locations;
        return branch.locations = map(_fixLocation)(
        locations), branch;
      })(
      branchMap);
      Obj.map(function(fn){
        var loc;
        loc = fn.loc;
        return fn.loc = _fixLocation(loc), fn;
      })(
      fnMap);
      return superclass.prototype.getPreamble.apply(this, arguments);
    };
    function LivescriptInstrumenter(){
      LivescriptInstrumenter.superclass.apply(this, arguments);
    }
    return LivescriptInstrumenter;
  }(Instrumenter));
  module.exports = function(){
    return {
      instrument: function(opts){
        return through(function(file, encoding, callback){
          var fullPath, instrumenter, ref$, coverageJson, instrumentedCode;
          fullPath = path.resolve(file.path);
          instrumenter = new (fullPath.indexOf('.ls') > -1 ? LivescriptInstrumenter : Instrumenter)({
            coverageVariable: coverageVariable
          });
          ref$ = instrumentCode(fullPath, instrumenter, file.contents.toString()), coverageJson = ref$.coverageJson, instrumentedCode = ref$.instrumentedCode;
          global[coverageVariable][fullPath] = coverageJson;
          file.contents = new Buffer(instrumentedCode);
          return callback(null, file);
        });
      },
      hookRequire: function(opts){
        return through(function(file, encoding, callback){
          delete require.cache[path.resolve(file.path)];
          return callback(null, file);
        }, function(callback){
          hook.unhookRequire();
          hook.hookRequire(function(path){
            return !!instrumentCode(path);
          }, function(code, path){
            return instrumentCode(path).instrumentedCode;
          }, {
            extensions: ['.js', '.ls']
          });
          callback();
        });
      },
      writeReports: function(opts){
        var logSummary;
        if (opts != null) {
          logSummary = opts.logSummary;
        }
        return through(function(file, encoding, callback){
          return callback(null, file);
        }, function(){
          var x$, collector, reports, ref$, reportSummary;
          x$ = collector = new Collector();
          x$.add(global[coverageVariable]);
          reports = (ref$ = opts != null ? opts.reports : void 8) != null
            ? ref$
            : {
              lcov: {
                dir: './coverage'
              }
            };
          if (typeof logSummary === 'undefined' || logSummary === true) {
            console.log("=============================================================================");
            each(function(arg$){
              var reportName, dir;
              reportName = arg$[0], dir = arg$[1].dir;
              return console.log("Writing " + reportName + " reports to [" + path.resolve(dir) + "]");
            })(
            filter(function(arg$){
              var reportOpts;
              reportOpts = arg$[1];
              return !!(reportOpts != null && reportOpts.dir);
            })(
            objToPairs(
            reports)));
            console.log("=============================================================================");
            console.log("");
            reportSummary = utils.summarizeCoverage(collector.getFinalCoverage());
            console.log("=============================== Coverage summary ===============================");
            each(function(it){
              var ref$, covered, total, pct, color;
              ref$ = reportSummary[it], covered = ref$.covered, total = ref$.total, pct = ref$.pct;
              color = (function(){
                switch (false) {
                case !(pct < 50):
                  return 'redBright';
                case !(pct >= 80):
                  return 'greenBright';
                default:
                  return 'yellowBright';
                }
              }());
              return console.log(cliColor[color](repeatString$(' ', 13 - it.length) + "" + capitalize(it) + " : " + pct + "% (" + covered + "/" + total + ")"));
            })(
            ['statements', 'branches', 'functions', 'lines']);
            console.log("================================================================================");
          }
          return each(function(arg$){
            var reportName, reportOpts, x$, report;
            reportName = arg$[0], reportOpts = arg$[1];
            x$ = report = Report.create(reportName, reportOpts);
            x$.writeReport(collector, true);
            return x$;
          })(
          objToPairs(
          reports));
        });
      }
    };
  };
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
