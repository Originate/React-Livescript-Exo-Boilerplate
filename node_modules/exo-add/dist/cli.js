// Generated by LiveScript 1.5.0
var ref$, cyan, green, red, inquirer, fs, glob, yaml, Logger, templatesPath, merge, N, version, path, tmplconv, yamlCutter, data, questions, appConfig, e;
ref$ = require('chalk'), cyan = ref$.cyan, green = ref$.green, red = ref$.red;
inquirer = require('inquirer');
fs = require('fs');
glob = require('glob');
yaml = require('js-yaml');
ref$ = require('exosphere-shared'), Logger = ref$.Logger, templatesPath = ref$.templatesPath;
merge = require('merge');
N = require('nitroglycerin');
version = require('../package.json').version;
path = require('path');
tmplconv = require('tmplconv');
yamlCutter = require('yaml-cutter');
console.log('We are about to add a new Exosphere service to the application!\n');
ref$ = parseCommandLine(process.argv), data = ref$.data, questions = ref$.questions;
try {
  appConfig = yaml.safeLoad(fs.readFileSync('application.yml', 'utf8'));
} catch (e$) {
  e = e$;
  if (e.code === 'ENOENT') {
    console.log(red("Error: application.yml not found. Please run this command in the root directory of an Exosphere application."));
    process.exit();
  }
  throw e;
}
inquirer.prompt(questions).then(function(answers){
  var srcPath, targetPath;
  data = merge(data, answers);
  srcPath = path.join(templatesPath, 'add-service', data.templateName);
  targetPath = path.join(process.cwd(), data.serviceName);
  data.appName = appConfig.name;
  return tmplconv.render(srcPath, targetPath, {
    data: data
  }).then(function(){
    var options;
    options = {
      file: 'application.yml',
      root: 'services',
      key: data.serviceName,
      value: {
        location: "./" + data.serviceName
      }
    };
    return yamlCutter.insertHash(options, N(function(){
      return console.log(green("\ndone"));
    }));
  });
});
function serviceNames(){
  return fs.readdirSync(path.join(templatesPath, 'add-service'));
}
function parseCommandLine(commandLineArgs){
  var data, questions, _, serviceType, serviceName, templateName, modelName, description;
  data = {};
  questions = [];
  _ = commandLineArgs[0], _ = commandLineArgs[1], serviceType = commandLineArgs[2], serviceName = commandLineArgs[3], templateName = commandLineArgs[4], modelName = commandLineArgs[5], description = commandLineArgs[6];
  if (serviceName) {
    data.serviceName = serviceName;
  } else {
    questions.push({
      message: 'Name of the service to create:',
      type: 'input',
      name: 'serviceName',
      filter: function(input){
        return input.trim();
      },
      validate: function(input){
        return input.length > 0;
      }
    });
  }
  if (description) {
    data.description = description;
  } else {
    questions.push({
      message: 'Description:',
      type: 'input',
      name: 'description',
      filter: function(input){
        return input.trim();
      }
    });
  }
  if (templateName) {
    data.templateName = templateName;
  } else {
    questions.push({
      message: 'Type:',
      type: 'list',
      name: 'templateName',
      choices: serviceNames()
    });
  }
  if (modelName) {
    data.modelName = modelName;
  } else {
    questions.push({
      message: 'Name of the data model:',
      type: 'input',
      name: 'modelName',
      filter: function(input){
        return input.trim();
      }
    });
  }
  return {
    data: data,
    questions: questions
  };
}