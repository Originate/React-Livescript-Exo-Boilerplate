// Generated by LiveScript 1.5.0
var async, EventEmitter, path, filter, ServiceTester, AppTester;
async = require('async');
EventEmitter = require('events').EventEmitter;
path = require('path');
filter = require('prelude-ls').filter;
ServiceTester = require('./service-tester');
AppTester = (function(superclass){
  var prototype = extend$((import$(AppTester, superclass).displayName = 'AppTester', AppTester), superclass).prototype, constructor = AppTester;
  function AppTester(appConfig){
    this.appConfig = appConfig;
  }
  AppTester.prototype.startTesting = function(){
    var testers, res$, i$, ref$, len$, serviceName, serviceDir, x$, tester, this$ = this;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = Object.keys(this.appConfig.services)).length; i$ < len$; ++i$) {
      serviceName = ref$[i$];
      serviceDir = path.join(process.cwd(), this.appConfig.services[serviceName].location);
      x$ = new ServiceTester(serviceName, {
        root: serviceDir
      });
      x$.on('output', fn$);
      x$.on('service-tests-passed', fn1$);
      x$.on('service-tests-failed', fn2$);
      x$.on('service-tests-skipped', fn3$);
      res$.push(x$);
    }
    testers = res$;
    return async.series((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = testers).length; i$ < len$; ++i$) {
        tester = ref$[i$];
        results$.push(tester.start);
      }
      return results$;
    }()), function(err, exitCodes){
      switch (false) {
      case !err:
        return this$.emit('all-tests-failed');
      case !this$._containsNonZero(exitCodes):
        return this$.emit('all-tests-failed');
      default:
        return this$.emit('all-tests-passed');
      }
    });
    function fn$(data){
      return this$.emit('output', data);
    }
    function fn1$(name){
      return this$.emit('service-tests-passed', name);
    }
    function fn2$(name){
      return this$.emit('service-tests-failed', name);
    }
    function fn3$(name){
      return this$.emit('service-tests-skipped', name);
    }
  };
  AppTester.prototype._containsNonZero = function(exitCodes){
    var this$ = this;
    return exitCodes.filter((function(it){
      return it > 0;
    })).length > 0;
  };
  return AppTester;
}(EventEmitter));
module.exports = AppTester;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}