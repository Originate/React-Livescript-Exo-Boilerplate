// Generated by LiveScript 1.5.0
var EventEmitter, callArgs, fs, yaml, ObservableProcess, path, ServiceTester;
EventEmitter = require('events').EventEmitter;
callArgs = require('exosphere-shared').callArgs;
fs = require('fs');
yaml = require('js-yaml');
ObservableProcess = require('observable-process');
path = require('path');
ServiceTester = (function(superclass){
  var prototype = extend$((import$(ServiceTester, superclass).displayName = 'ServiceTester', ServiceTester), superclass).prototype, constructor = ServiceTester;
  function ServiceTester(name, config){
    this.name = name;
    this.config = config;
    this.write = bind$(this, 'write', prototype);
    this.start = bind$(this, 'start', prototype);
    this.serviceConfig = yaml.safeLoad(fs.readFileSync(path.join(this.config.root, 'service.yml'), 'utf8'));
  }
  ServiceTester.prototype.start = function(done){
    var x$, this$ = this;
    if (!this.serviceConfig.tests) {
      this.emit('service-tests-skipped', this.name);
      return done();
    }
    x$ = new ObservableProcess(callArgs(this._createCommand(this.serviceConfig.tests)), {
      cwd: this.config.root,
      env: this.config,
      stdout: {
        write: this.write
      },
      stderr: {
        write: this.write
      }
    });
    x$.on('ended', function(exitCode){
      if (exitCode > 0) {
        this$.emit('service-tests-failed', this$.name);
      } else {
        this$.emit('service-tests-passed', this$.name);
      }
      return typeof done == 'function' ? done(null, exitCode) : void 8;
    });
    return x$;
  };
  ServiceTester.prototype._createCommand = function(command){
    if (this._isLocalCommand(command)) {
      command = path.join(this.config.root, command);
    }
    return command;
  };
  ServiceTester.prototype._isLocalCommand = function(command){
    return command.substr(0, 2) === './';
  };
  ServiceTester.prototype.write = function(text){
    return this.emit('output', {
      name: this.name,
      text: text
    });
  };
  return ServiceTester;
}(EventEmitter));
module.exports = ServiceTester;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}