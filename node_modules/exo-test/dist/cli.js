// Generated by LiveScript 1.5.0
var AppTester, ref$, cyan, green, red, fs, yaml, Logger, path, ServiceTester, logger;
AppTester = require('./app-tester');
ref$ = require('chalk'), cyan = ref$.cyan, green = ref$.green, red = ref$.red;
fs = require('fs');
yaml = require('js-yaml');
Logger = require('exosphere-shared').Logger;
path = require('path');
ServiceTester = require('./service-tester');
switch (false) {
case !cwdIsService():
  testService();
  break;
case !cwdIsApp():
  testApp();
  break;
default:
  logger = new Logger().log({
    name: 'exo-test',
    text: "Tests do not exist. Not in service or application directory."
  });
}
function cwdIsService(){
  var e;
  try {
    return fs.statSync('service.yml');
  } catch (e$) {
    e = e$;
    return false;
  }
}
function cwdIsApp(){
  var e;
  try {
    return fs.statSync('application.yml');
  } catch (e$) {
    e = e$;
    return false;
  }
}
function testService(){
  var serviceName, x$, logger, y$, this$ = this;
  serviceName = path.basename(process.cwd());
  x$ = logger = new Logger([serviceName]);
  x$.log({
    name: 'exo-test',
    text: "Testing service '" + serviceName + "'"
  });
  y$ = new ServiceTester(serviceName, {
    root: process.cwd()
  });
  y$.on('output', function(data){
    return logger.log(data);
  });
  y$.on('service-tests-passed', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " works"
    });
  });
  y$.on('service-tests-failed', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " is broken"
    });
  });
  y$.on('service-tests-skipped', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " has no tests, skipping"
    });
  });
  y$.start();
  return y$;
}
function testApp(){
  var appConfig, x$, logger, y$, appTester;
  appConfig = yaml.safeLoad(fs.readFileSync('application.yml', 'utf8'));
  x$ = logger = new Logger(Object.keys(appConfig.services));
  x$.log({
    name: 'exo-test',
    text: "Testing application '" + appConfig.name + "'"
  });
  y$ = appTester = new AppTester(appConfig);
  y$.on('output', function(data){
    return logger.log(data);
  });
  y$.on('all-tests-passed', function(){
    return logger.log({
      name: 'exo-test',
      text: 'All tests passed'
    });
  });
  y$.on('all-tests-failed', function(){
    return logger.log({
      name: 'exo-test',
      text: 'Tests failed'
    });
  });
  y$.on('service-tests-passed', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " works"
    });
  });
  y$.on('service-tests-failed', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " is broken"
    });
  });
  y$.on('service-tests-skipped', function(name){
    return logger.log({
      name: 'exo-test',
      text: name + " has no tests, skipping"
    });
  });
  y$.startTesting();
  return y$;
}