(function() {
  var InstalledModuleValidater, _, async, fs, fsExtra, path, semver;

  _ = require('lodash');

  async = require('async');

  fs = require('fs');

  fsExtra = require('fs-extra');

  path = require('path');

  semver = require('semver');

  InstalledModuleValidater = (function() {
    function InstalledModuleValidater() {}

    InstalledModuleValidater.prototype.validate = function(arg, done) {
      var dir, issues, iterator, modules, packageJson;
      dir = arg.dir, packageJson = arg.packageJson;
      modules = _.assign({}, packageJson.dependencies, packageJson.devDependencies);
      issues = [];
      iterator = (function(_this) {
        return function(version, name, next) {
          if (!semver.validRange(version)) {
            return next();
          }
          return _this.validateModule({
            dir: dir,
            name: name,
            version: version
          }, function(err, status) {
            if (err) {
              return next(err);
            }
            if (status) {
              issues.push({
                name: name,
                status: status
              });
            }
            return next();
          });
        };
      })(this);
      return async.forEachOf(modules, iterator, (function(_this) {
        return function(err) {
          if (err) {
            return done(err);
          }
          if (issues.length === 0) {
            return done();
          }
          return done(new Error(_this.buildErrorMessage(issues)));
        };
      })(this));
    };

    InstalledModuleValidater.prototype.validateModule = function(arg, done) {
      var dir, modulePackageJsonPath, name, version;
      dir = arg.dir, name = arg.name, version = arg.version;
      modulePackageJsonPath = path.join(dir, 'node_modules', name, 'package.json');
      return fs.access(modulePackageJsonPath, function(err) {
        if (err) {
          return done(null, 'not installed');
        }
        return fsExtra.readJson(modulePackageJsonPath, function(err, modulePackageJson) {
          if (err) {
            return done(err);
          }
          if (semver.satisfies(modulePackageJson.version, version)) {
            return done();
          } else {
            return done(null, "installed: " + modulePackageJson.version + ", listed: " + version);
          }
        });
      });
    };

    InstalledModuleValidater.prototype.buildErrorMessage = function(issues) {
      var issueMessages;
      issueMessages = issues.map(function(arg) {
        var name, status;
        name = arg.name, status = arg.status;
        return name + " (" + status + ")";
      });
      return "The following modules listed in your `package.json` have issues:\n  " + (issueMessages.join('\n  ')) + "\nAll modules need to be installed with the correct semantic version\nto properly check for the usage of a module's executables.";
    };

    return InstalledModuleValidater;

  })();

  module.exports = InstalledModuleValidater;

}).call(this);
