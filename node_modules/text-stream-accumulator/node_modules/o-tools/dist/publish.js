// Generated by LiveScript 1.5.0
var ref$, bold, cyan, dim, green, red, child_process, inquirer, jsonfile, semver, name, version, level, targetVersion, question;
ref$ = require('chalk'), bold = ref$.bold, cyan = ref$.cyan, dim = ref$.dim, green = ref$.green, red = ref$.red;
child_process = require('child_process');
inquirer = require('inquirer');
jsonfile = require('jsonfile');
semver = require('semver');
ref$ = jsonfile.readFileSync('package.json'), name = ref$.name, version = ref$.version;
if (process.argv.length !== 3) {
  displayCurrentVersion(name, version);
  displayHelp();
}
level = process.argv[2];
if (['-h', '--help'].indexOf(level) > -1) {
  displayHelp();
}
targetVersion = semver.inc(version, level);
if (!targetVersion) {
  console.log("\n" + bold(red('Error:')) + " " + bold(cyan(level)) + " " + red('is not a valid version increment'));
  displayHelp();
}
console.log("\nYou are about to bump " + green(bold(name)) + " version " + cyan(bold(version)) + " up to " + cyan(bold(targetVersion)) + "\n");
question = {
  type: 'list',
  name: 'continue',
  message: 'Are you sure?',
  choices: ['yes', 'no']
};
inquirer.prompt([question]).then(function(answer){
  if (answer['continue'] === 'no') {
    console.log('\nAborting ...\n');
    process.exit();
  }
  console.log();
  if (run("git status --porcelain", false).length) {
    displayError('Please commit all files before releasing');
  }
  if (run("git rev-parse --abbrev-ref HEAD", false) !== 'master') {
    displayError('You must be on the master branch to publish');
  }
  run("git pull");
  run("node_modules/o-tools/bin/update-check");
  run("bin/spec");
  run("npm version " + level);
  run("git push");
  run("git push --tags");
  run('git checkout release');
  run('git pull');
  run('git merge master');
  run('git push');
  run('git checkout master');
  return console.log("\n" + green(bold(name)) + " version " + cyan(bold(targetVersion)) + " successfully released\n");
});
function displayHeader(text){
  return process.stdout.write(text + " ... ");
}
function displayFinish(){
  return console.log(green('ok'));
}
function displayError(error){
  console.log(red("\n" + error + "\n"));
  return process.exit(1);
}
function displayCurrentVersion(name, version){
  return console.log("\n" + green(name) + " is currently at version " + cyan(version) + "\n");
}
function displayHelp(){
  console.log("\nUsage:\n\n  " + bold('publish <patch|minor|major>') + "\n");
  return process.exit(1);
}
function run(command, output){
  var result, e;
  output == null && (output = true);
  if (output) {
    console.log(bold(command));
  }
  try {
    result = child_process.execSync(command + " 2>&1").toString().trim();
  } catch (e$) {
    e = e$;
    console.log(red(e.stdout.toString().trim()));
    displayError("command " + bold(command) + " failed");
  }
  if (output) {
    console.log(dim(result + "\n"));
  }
  return result;
}