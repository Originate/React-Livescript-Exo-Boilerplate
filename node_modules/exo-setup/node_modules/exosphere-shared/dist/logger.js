// Generated by LiveScript 1.5.0
var ref$, black, blue, bold, cyan, dim, green, magenta, red, reset, white, yellow, map, maximum, Logger;
ref$ = require('chalk'), black = ref$.black, blue = ref$.blue, bold = ref$.bold, cyan = ref$.cyan, dim = ref$.dim, green = ref$.green, magenta = ref$.magenta, red = ref$.red, reset = ref$.reset, white = ref$.white, yellow = ref$.yellow;
ref$ = require('prelude-ls'), map = ref$.map, maximum = ref$.maximum;
Logger = (function(){
  Logger.displayName = 'Logger';
  var prototype = Logger.prototype, constructor = Logger;
  function Logger(serviceNames){
    serviceNames == null && (serviceNames = []);
    this.log = bind$(this, 'log', prototype);
    this.colors = {
      exocom: blue,
      exorun: reset,
      'exo-clone': reset,
      'exo-setup': reset,
      'exo-test': reset,
      'exo-sync': reset,
      'exo-lint': reset
    };
    this.setColors(serviceNames);
  }
  Logger.prototype.log = function(arg$){
    var name, text, trim, color, ref$, i$, len$, line, results$ = [];
    name = arg$.name, text = arg$.text, trim = arg$.trim;
    color = (ref$ = this.colors[name]) != null ? ref$ : reset;
    if (trim !== false) {
      text = text.trim();
    }
    for (i$ = 0, len$ = (ref$ = text.split('\n')).length; i$ < len$; ++i$) {
      line = ref$[i$];
      results$.push(console.log(color(bold(this._pad(name) + " ")), color(line)));
    }
    return results$;
  };
  Logger.prototype.setColors = function(serviceNames){
    var i$, len$, i, serviceName, this$ = this;
    for (i$ = 0, len$ = serviceNames.length; i$ < len$; ++i$) {
      i = i$;
      serviceName = serviceNames[i$];
      this.colors[serviceName] = Logger._default_colors[i % Logger._default_colors.length];
    }
    return this.length = maximum(
    map(function(it){
      return it.length;
    }, Object.keys(this.colors)));
  };
  Logger._default_colors = [blue, cyan, magenta, yellow];
  Logger.prototype._pad = function(text){
    return ("               " + text).slice(-this.length);
  };
  return Logger;
}());
module.exports = Logger;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}