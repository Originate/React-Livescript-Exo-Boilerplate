// Generated by LiveScript 1.5.0
var EventEmitter, ref$, callArgs, normalizePath, fs, yaml, ObservableProcess, path, ServiceSetup;
EventEmitter = require('events').EventEmitter;
ref$ = require('exosphere-shared'), callArgs = ref$.callArgs, normalizePath = ref$.normalizePath;
fs = require('fs');
yaml = require('js-yaml');
ObservableProcess = require('observable-process');
path = require('path');
ServiceSetup = (function(superclass){
  var prototype = extend$((import$(ServiceSetup, superclass).displayName = 'ServiceSetup', ServiceSetup), superclass).prototype, constructor = ServiceSetup;
  function ServiceSetup(name, config){
    this.name = name;
    this.config = config;
    this.write = bind$(this, 'write', prototype);
    this.start = bind$(this, 'start', prototype);
    this.serviceConfig = yaml.safeLoad(fs.readFileSync(path.join(this.config.root, 'service.yml'), 'utf8'));
  }
  ServiceSetup.prototype.start = function(done){
    var x$, this$ = this;
    this.emit('start', this.name);
    x$ = new ObservableProcess(callArgs(normalizePath(this.serviceConfig.setup)), {
      cwd: this.config.root,
      stdout: {
        write: this.write
      },
      stderr: {
        write: this.write
      }
    });
    x$.on('ended', function(exitCode, killed){
      switch (false) {
      case exitCode !== 0:
        this$.emit('finished', this$.name);
        break;
      default:
        this$.emit('error', this$.name, exitCode);
      }
      return done();
    });
    return x$;
  };
  ServiceSetup.prototype.write = function(text){
    return this.emit('output', {
      name: this.name,
      text: text
    });
  };
  return ServiceSetup;
}(EventEmitter));
module.exports = ServiceSetup;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}