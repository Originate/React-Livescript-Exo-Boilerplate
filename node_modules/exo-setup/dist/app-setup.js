// Generated by LiveScript 1.5.0
var async, EventEmitter, path, ServiceSetup, AppSetup;
async = require('async');
EventEmitter = require('events').EventEmitter;
path = require('path');
ServiceSetup = require('./service-setup');
AppSetup = (function(superclass){
  var prototype = extend$((import$(AppSetup, superclass).displayName = 'AppSetup', AppSetup), superclass).prototype, constructor = AppSetup;
  function AppSetup(appConfig){
    this.appConfig = appConfig;
  }
  AppSetup.prototype.startSetup = function(){
    var setups, res$, serviceName, ref$, x$, operation, own$ = {}.hasOwnProperty, this$ = this;
    res$ = [];
    for (serviceName in ref$ = this.appConfig.services) if (own$.call(ref$, serviceName)) {
      x$ = new ServiceSetup(serviceName, {
        root: path.join(process.cwd(), this.appConfig.services[serviceName].location)
      });
      x$.on('start', fn$);
      x$.on('output', fn1$);
      x$.on('finished', fn2$);
      x$.on('error', fn3$);
      res$.push(x$);
    }
    setups = res$;
    operation = process.platform === 'win32'
      ? async.mapSeries
      : async.map;
    return operation(setups, function(){
      return arguments[0].start(arguments[1]);
    }, function(err){
      return this$.emit('setup-complete');
    });
    function fn$(name){
      return this$.emit('start', name);
    }
    function fn1$(data){
      return this$.emit('output', data);
    }
    function fn2$(name, exitCode){
      return this$.emit('finished', name, exitCode);
    }
    function fn3$(name, exitCode){
      return this$.emit('error', name, exitCode);
    }
  };
  return AppSetup;
}(EventEmitter));
module.exports = AppSetup;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}