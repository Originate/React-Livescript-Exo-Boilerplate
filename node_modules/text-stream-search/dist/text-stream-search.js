// Generated by LiveScript 1.5.0
var TextStreamAccumulator, debug, TextStreamSearch;
TextStreamAccumulator = require('text-stream-accumulator');
debug = require('debug')('text-stream-search');
TextStreamSearch = (function(){
  TextStreamSearch.displayName = 'TextStreamSearch';
  var prototype = TextStreamSearch.prototype, constructor = TextStreamSearch;
  function TextStreamSearch(stream){
    this._onData = bind$(this, '_onData', prototype);
    stream.on('data', this._onData);
    this._searches = [];
    this._output = new TextStreamAccumulator(stream);
  }
  TextStreamSearch.prototype.fullText = function(){
    return this._output.toString();
  };
  TextStreamSearch.prototype.wait = function(text, handler){
    this._searches.push({
      text: text,
      handler: handler
    });
    return this._checkSearches();
  };
  TextStreamSearch.prototype._onData = function(data){
    var this$ = this;
    debug("add text: '" + data.toString() + "'");
    return process.nextTick(function(){
      return this$._checkSearches();
    });
  };
  TextStreamSearch.prototype._checkSearches = function(){
    var i$, i, results$ = [];
    for (i$ = this._searches.length - 1; i$ >= 0; --i$) {
      i = i$;
      if (this._output.toString().includes(this._searches[i].text)) {
        debug("found match: '" + this._searches[i].text + "'");
        this._searches[i].handler();
        results$.push(this._searches.splice(i, 1));
      }
    }
    return results$;
  };
  TextStreamSearch.prototype.reset = function(){
    return this._output.reset();
  };
  return TextStreamSearch;
}());
module.exports = TextStreamSearch;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}