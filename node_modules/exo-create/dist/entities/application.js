// Generated by LiveScript 1.5.0
var green, templatesPath, inquirer, merge, path, empty, tmplconv, ref$, data, questions, slice$ = [].slice;
green = require('chalk').green;
templatesPath = require('exosphere-shared').templatesPath;
inquirer = require('inquirer');
merge = require('merge');
path = require('path');
empty = require('prelude-ls').empty;
tmplconv = require('tmplconv');
ref$ = parseCommandLine(process.argv), data = ref$.data, questions = ref$.questions;
inquirer.prompt(questions).then(function(answers){
  var srcPath, targetPath;
  data = merge(data, answers);
  srcPath = path.join(templatesPath, 'create-app');
  targetPath = data['app-name'];
  console.log();
  return tmplconv.render(srcPath, targetPath, {
    data: data
  }).then(function(){
    return console.log(green("\ndone"));
  });
});
function parseCommandLine(commandLineArgs){
  var data, questions, _, appName, appVersion, appDescription;
  data = {};
  questions = [];
  _ = commandLineArgs[0], _ = commandLineArgs[1], _ = commandLineArgs[2], appName = commandLineArgs[3], appVersion = commandLineArgs[4], appDescription = slice$.call(commandLineArgs, 5);
  if (appName) {
    data['app-name'] = appName;
  } else {
    questions.push({
      type: 'input',
      name: 'app-name',
      message: 'Name of the application to create:',
      filter: function(input){
        return input.trim();
      },
      validate: function(input){
        return input.length > 0;
      }
    });
  }
  if (!empty(appDescription)) {
    data['app-description'] = appDescription.join(' ');
  } else {
    questions.push({
      type: 'input',
      name: 'app-description',
      message: 'Description:'
    });
  }
  if (appVersion) {
    data['app-version'] = appVersion;
  } else {
    questions.push({
      type: 'input',
      name: 'app-version',
      message: 'Initial version:',
      'default': '0.0.1'
    });
  }
  return {
    data: data,
    questions: questions
  };
}