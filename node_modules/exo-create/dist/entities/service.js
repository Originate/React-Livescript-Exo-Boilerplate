// Generated by LiveScript 1.5.0
var green, templatesPath, inquirer, fs, yaml, merge, N, path, empty, tmplconv, yamlCutter, ref$, data, questions, slice$ = [].slice;
green = require('chalk').green;
templatesPath = require('exosphere-shared').templatesPath;
inquirer = require('inquirer');
fs = require('fs');
yaml = require('js-yaml');
merge = require('merge');
N = require('nitroglycerin');
path = require('path');
empty = require('prelude-ls').empty;
tmplconv = require('tmplconv');
yamlCutter = require('yaml-cutter');
console.log('We are about to create a new Exosphere service!\n');
ref$ = parseCommandLine(process.argv), data = ref$.data, questions = ref$.questions;
inquirer.prompt(questions).then(function(answers){
  var srcPath, targetPath, appConfig, error;
  data = merge(data, answers);
  srcPath = path.join(templatesPath, 'add-service', data.templateName);
  targetPath = path.join(process.cwd(), '..', data.serviceName);
  try {
    appConfig = yaml.safeLoad(fs.readFileSync('application.yml', 'utf8'));
  } catch (e$) {
    error = e$;
    throw new Error("Creation of service '" + data.serviceName + "' has failed.");
  }
  data.appName = appConfig.name;
  return tmplconv.render(srcPath, targetPath, {
    data: data
  }).then(function(){
    var options;
    options = {
      file: 'application.yml',
      root: 'services',
      key: data.serviceName,
      value: {
        location: "../" + data.serviceName
      }
    };
    return yamlCutter.insertHash(options, N(function(){
      return console.log(green("\ndone"));
    }));
  });
});
function serviceNames(){
  return fs.readdirSync(path.join(templatesPath, 'add-service'));
}
function parseCommandLine(commandLineArgs){
  var data, questions, _, serviceName, templateName, modelName, description;
  data = {};
  questions = [];
  _ = commandLineArgs[0], _ = commandLineArgs[1], _ = commandLineArgs[2], serviceName = commandLineArgs[3], templateName = commandLineArgs[4], modelName = commandLineArgs[5], description = slice$.call(commandLineArgs, 6);
  if (serviceName) {
    data.serviceName = serviceName;
  } else {
    questions.push({
      message: 'Name of the service to create',
      type: 'input',
      name: 'serviceName',
      filter: function(input){
        return input.trim();
      },
      validate: function(input){
        return input.length > 0;
      }
    });
  }
  if (templateName) {
    data.templateName = templateName;
  } else {
    questions.push({
      message: 'Type:',
      type: 'list',
      name: 'templateName',
      choices: serviceNames()
    });
  }
  if (modelName) {
    data.modelName = modelName;
  } else {
    questions.push({
      message: 'Name of the data model (leave blank if no model exists):',
      type: 'input',
      name: 'modelName',
      filter: function(input){
        return input.trim();
      }
    });
  }
  if (!empty(description)) {
    data.description = description.join(' ');
  } else {
    questions.push({
      message: 'Description:',
      type: 'input',
      name: 'description',
      filter: function(input){
        return input.trim();
      }
    });
  }
  return {
    data: data,
    questions: questions
  };
}