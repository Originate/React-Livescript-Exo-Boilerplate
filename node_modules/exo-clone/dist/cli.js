// Generated by LiveScript 1.5.0
var AppCloner, ref$, cyan, green, red, yellow, yaml, Logger, path, _, repoOrigin, repo, logger, x$;
AppCloner = require('./app-cloner');
ref$ = require('chalk'), cyan = ref$.cyan, green = ref$.green, red = ref$.red, yellow = ref$.yellow;
yaml = require('js-yaml');
Logger = require('exosphere-shared').Logger;
path = require('path');
console.log('We are going to clone an Exosphere application!\n');
ref$ = process.argv, _ = ref$[0], _ = ref$[1], repoOrigin = ref$[2];
if (!repoOrigin) {
  return missingOrigin();
}
repo = repoInfo(repoOrigin);
logger = new Logger;
x$ = new AppCloner(repo);
x$.on('output', function(data){
  return logger.log(data);
});
x$.on('app-config-ready', function(appConfig){
  return logger.setColors(Object.keys(appConfig.services));
});
x$.on('app-verification-failed', function(err){
  return logger.log({
    name: 'exo-clone',
    text: red("Error: application could not be verified.\n" + red(err))
  });
});
x$.on('app-clone-success', function(){
  return logger.log({
    name: 'exo-clone',
    text: repo.name + " Application cloned into " + repo.path
  });
});
x$.on('app-clone-failed', function(){
  return logger.log({
    name: 'exo-clone',
    text: red("Error: cloning " + repo.name + " failed")
  });
});
x$.on('service-clone-fail', function(name){
  return logger.log({
    name: name,
    text: red("Service cloning failed")
  });
});
x$.on('service-invalid', function(name){
  return logger.log({
    name: name,
    text: red(name + " is an invalid service")
  });
});
x$.on('service-clones-failed', function(){
  return logger.log({
    name: 'exo-clone',
    text: red("Some services failed to clone or to be verified.\nDone")
  });
});
x$.on('all-clones-successful', function(){
  return logger.log({
    name: 'exo-clone',
    text: green("Services successfully cloned.\nDone")
  });
});
x$.on('done', function(){
  return logger.log({
    name: 'exo-clone',
    text: 'Done'
  });
});
x$.start();
function repoInfo(origin){
  var repoName, repoPath, repo;
  repoName = path.basename(origin, '.git');
  repoPath = path.join(process.cwd(), repoName);
  return repo = {
    name: repoName,
    origin: origin,
    path: repoPath
  };
}
function missingOrigin(){
  console.log(red("Error: missing repository origin"));
  return printUsage();
}
function printUsage(){
  return console.log('Usage: exo clone <origin>\n');
}