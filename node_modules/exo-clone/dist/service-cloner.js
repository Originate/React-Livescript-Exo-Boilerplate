// Generated by LiveScript 1.5.0
var EventEmitter, fs, ObservableProcess, path, ServiceCloner;
EventEmitter = require('events');
fs = require('fs');
ObservableProcess = require('observable-process');
path = require('path');
ServiceCloner = (function(superclass){
  var prototype = extend$((import$(ServiceCloner, superclass).displayName = 'ServiceCloner', ServiceCloner), superclass).prototype, constructor = ServiceCloner;
  function ServiceCloner(name, config){
    this.name = name;
    this.config = config;
    this.write = bind$(this, 'write', prototype);
    this.start = bind$(this, 'start', prototype);
  }
  ServiceCloner.prototype.start = function(done){
    var x$, this$ = this;
    x$ = new ObservableProcess(this._createCommand('git clone'), {
      cwd: this.config.root,
      stdout: {
        write: this.write
      },
      stderr: {
        write: this.write
      }
    });
    x$.on('ended', function(exitCode){
      switch (false) {
      case !(exitCode > 0):
        this$.emit('service-clone-fail', this$.name);
        break;
      case !!this$._isValidService():
        this$.emit('service-invalid', this$.name);
        exitCode = 1;
        break;
      default:
        this$.emit('service-clone-success', this$.name);
      }
      return done(null, exitCode);
    });
    return x$;
  };
  ServiceCloner.prototype._isValidService = function(){
    var e;
    try {
      fs.accessSync(path.join(this.config.path, 'service.yml'));
      return true;
    } catch (e$) {
      e = e$;
      return false;
    }
  };
  ServiceCloner.prototype._createCommand = function(command){
    return [command, this.config.origin].join(' ');
  };
  ServiceCloner.prototype._isLocalService = function(path){
    return path.substr(0, 2) === './';
  };
  ServiceCloner.prototype.write = function(text){
    return this.emit('output', {
      name: this.name,
      text: text
    });
  };
  return ServiceCloner;
}(EventEmitter));
module.exports = ServiceCloner;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}