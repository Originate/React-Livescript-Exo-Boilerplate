// Generated by LiveScript 1.5.0
var async, red, EventEmitter, ServiceSyncer, filter, AppSyncer;
async = require('async');
red = require('chalk').red;
EventEmitter = require('events').EventEmitter;
ServiceSyncer = require('./service-syncer');
filter = require('prelude-ls').filter;
AppSyncer = (function(superclass){
  var prototype = extend$((import$(AppSyncer, superclass).displayName = 'AppSyncer', AppSyncer), superclass).prototype, constructor = AppSyncer;
  function AppSyncer(appConfig){
    this.appConfig = appConfig;
  }
  AppSyncer.prototype.startSyncing = function(){
    var syncers, res$, serviceName, ref$, ref1$, service, x$, syncer, this$ = this;
    res$ = [];
    for (serviceName in ref$ = (ref1$ = this.appConfig.services) != null
      ? ref1$
      : {}) {
      service = ref$[serviceName];
      x$ = new ServiceSyncer(serviceName, {
        root: service.location
      });
      x$.on('output', fn$);
      res$.push(x$);
    }
    syncers = res$;
    return async.parallel((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = syncers).length; i$ < len$; ++i$) {
        syncer = ref$[i$];
        results$.push(syncer.start);
      }
      return results$;
    }()), function(err, exitCodes){
      switch (false) {
      case !this$._countErrors(exitCodes):
        return this$.emit('sync-failed');
      default:
        return this$.emit('sync-success');
      }
    });
    function fn$(){
      return this$.emit('output', arguments[0]);
    }
  };
  AppSyncer.prototype._countErrors = function(exitCodes){
    return exitCodes.filter(function(code){
      return code !== 0;
    }).length;
  };
  return AppSyncer;
}(EventEmitter));
module.exports = AppSyncer;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}