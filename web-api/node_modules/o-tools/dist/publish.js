// Generated by LiveScript 1.5.0
var async, ref$, bold, cyan, dim, green, red, dimConsole, ObservableProcess, inquirer, jsonfile, semver, name, version, level, targetVersion, question;
async = require('async');
ref$ = require('chalk'), bold = ref$.bold, cyan = ref$.cyan, dim = ref$.dim, green = ref$.green, red = ref$.red;
dimConsole = require('dim-console');
ObservableProcess = require('observable-process');
inquirer = require('inquirer');
jsonfile = require('jsonfile');
semver = require('semver');
ref$ = jsonfile.readFileSync('package.json'), name = ref$.name, version = ref$.version;
if (process.argv.length !== 3) {
  displayCurrentVersion(name, version);
  displayHelp();
}
level = process.argv[2];
if (['-h', '--help'].indexOf(level) > -1) {
  displayHelp();
}
targetVersion = semver.inc(version, level);
if (!targetVersion) {
  console.log("\n" + bold(red('Error:')) + " " + bold(cyan(level)) + " " + red('is not a valid version increment'));
  displayHelp();
}
console.log("\nYou are about to bump " + green(bold(name)) + " version " + cyan(bold(version)) + " up to " + cyan(bold(targetVersion)) + "\n");
question = {
  type: 'list',
  name: 'continue',
  message: 'Are you sure?',
  choices: ['yes', 'no']
};
inquirer.prompt([question]).then(function(answer){
  if (answer['continue'] === 'no') {
    console.log('\nAborting ...\n');
    process.exit();
  }
  console.log();
  return run("git status --porcelain", function(err, openFiles){
    if (openFiles) {
      displayError('Please commit all files before releasing');
    }
    return run("git rev-parse --abbrev-ref HEAD", function(err, currentBranch){
      var commands;
      if (currentBranch.trim() !== 'master') {
        displayError('You must be on the master branch to publish');
      }
      commands = ['git pull', 'node_modules/o-tools/bin/update-check', 'bin/spec', "npm version " + level, 'git push', 'git push --tags', 'git checkout release', 'git pull', 'git merge master', 'git push', 'git checkout master'];
      return async.eachSeries(commands, run, function(){
        return console.log("\n" + green(bold(name)) + " version " + cyan(bold(targetVersion)) + " successfully released\n");
      });
    });
  });
});
function displayHeader(text){
  return process.stdout.write(text + " ... ");
}
function displayFinish(){
  return console.log(green('ok'));
}
function displayError(error){
  console.log(red("\n" + error + "\n"));
  return process.exit(1);
}
function displayCurrentVersion(name, version){
  return console.log("\n" + green(name) + " is currently at version " + cyan(version) + "\n");
}
function displayHelp(){
  console.log("\nUsage:\n\n  " + bold('publish <patch|minor|major>') + "\n");
  return process.exit(1);
}
function run(command, done){
  var process;
  console.log(bold(command));
  process = new ObservableProcess(command, dimConsole.process);
  return process.on('ended', function(exitCode){
    if (exitCode) {
      displayError('Error!');
    }
    console.log('\n');
    return done(null, process.fullOutput());
  });
}