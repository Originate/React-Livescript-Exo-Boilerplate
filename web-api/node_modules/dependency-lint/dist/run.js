(function() {
  var AutoCorrector, ConfigurationLoader, DefaultFormatter, Linter, Promise, _, coroutine, fsExtra, hasError, path, readJson, run, writeJson;

  _ = require('lodash');

  AutoCorrector = require('./auto_corrector');

  ConfigurationLoader = require('./configuration_loader');

  DefaultFormatter = require('./formatters/default_formatter');

  fsExtra = require('fs-extra');

  Linter = require('./linter');

  path = require('path');

  Promise = require('bluebird');

  coroutine = Promise.coroutine;

  readJson = Promise.promisify(fsExtra.readJson);

  writeJson = Promise.promisify(fsExtra.writeJson);

  hasError = function(results) {
    return _.some(results, function(modules) {
      return _.some(modules, function(arg) {
        var error, errorFixed, errorIgnored;
        error = arg.error, errorFixed = arg.errorFixed, errorIgnored = arg.errorIgnored;
        return error && !(errorFixed || errorIgnored);
      });
    });
  };

  run = coroutine(function*(arg) {
    var autoCorrect, config, dir, fixes, packageJson, packageJsonPath, ref, results, updatedPackageJson;
    autoCorrect = arg.autoCorrect;
    dir = process.cwd();
    packageJsonPath = path.join(dir, 'package.json');
    packageJson = (yield readJson(packageJsonPath));
    config = (yield new ConfigurationLoader().load(dir));
    results = (yield new Linter(config).lint({
      dir: dir,
      packageJson: packageJson
    }));
    if (autoCorrect) {
      ref = new AutoCorrector().correct({
        packageJson: packageJson,
        results: results
      }), fixes = ref.fixes, updatedPackageJson = ref.updatedPackageJson;
      (yield writeJson(packageJsonPath, updatedPackageJson));
    }
    new DefaultFormatter({
      stream: process.stdout
    }).print({
      fixes: fixes,
      results: results
    });
    if (hasError(results)) {
      return process.exit(1);
    }
  });

  module.exports = run;

}).call(this);
