(function() {
  var ModuleNameParser, builtIns, globalExecutables,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  builtIns = ['assert', 'buffer', 'child_process', 'cluster', 'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https', 'net', 'os', 'path', 'punycode', 'querystring', 'readline', 'reply', 'stream', 'string_decoder', 'tls', 'tty', 'url', 'util', 'vm', 'zlib'];

  globalExecutables = ['npm'];

  ModuleNameParser = {
    isBuiltIn: function(name) {
      return indexOf.call(builtIns, name) >= 0;
    },
    isGlobalExecutable: function(name) {
      return indexOf.call(globalExecutables, name) >= 0;
    },
    isRelative: function(name) {
      return name[0] === '.';
    },
    stripLoaders: function(name) {
      var ref;
      ref = name.split('!'), name = ref[ref.length - 1];
      return name;
    },
    stripSubpath: function(name) {
      var parts;
      parts = name.split('/');
      if (name[0] === '@') {
        return parts.slice(0, 2).join('/');
      } else {
        return parts[0];
      }
    }
  };

  module.exports = ModuleNameParser;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbnRlci91c2VkX21vZHVsZV9maW5kZXIvbW9kdWxlX25hbWVfcGFyc2VyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsNkNBQUE7SUFBQTs7RUFBQSxRQUFBLEdBQVcsQ0FDVCxRQURTLEVBQ0MsUUFERCxFQUNXLGVBRFgsRUFDNEIsU0FENUIsRUFDdUMsUUFEdkMsRUFDaUQsT0FEakQsRUFDMEQsS0FEMUQsRUFDaUUsUUFEakUsRUFDMkUsUUFEM0UsRUFFVCxJQUZTLEVBRUgsTUFGRyxFQUVLLE9BRkwsRUFFYyxLQUZkLEVBRXFCLElBRnJCLEVBRTJCLE1BRjNCLEVBRW1DLFVBRm5DLEVBRStDLGFBRi9DLEVBRThELFVBRjlELEVBRTBFLE9BRjFFLEVBR1QsUUFIUyxFQUdDLGdCQUhELEVBR21CLEtBSG5CLEVBRzBCLEtBSDFCLEVBR2lDLEtBSGpDLEVBR3dDLE1BSHhDLEVBR2dELElBSGhELEVBR3NELE1BSHREOztFQU9YLGlCQUFBLEdBQW9CLENBQ2xCLEtBRGtCOztFQUtwQixnQkFBQSxHQUVFO0lBQUEsU0FBQSxFQUFXLFNBQUMsSUFBRDthQUFVLGFBQVEsUUFBUixFQUFBLElBQUE7SUFBVixDQUFYO0lBRUEsa0JBQUEsRUFBb0IsU0FBQyxJQUFEO2FBQVUsYUFBUSxpQkFBUixFQUFBLElBQUE7SUFBVixDQUZwQjtJQUlBLFVBQUEsRUFBWSxTQUFDLElBQUQ7YUFBVSxJQUFLLENBQUEsQ0FBQSxDQUFMLEtBQVc7SUFBckIsQ0FKWjtJQU1BLFlBQUEsRUFBYyxTQUFDLElBQUQ7QUFDWixVQUFBO01BQUEsTUFBYyxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZCxFQUFNO2FBQ047SUFGWSxDQU5kO0lBVUEsWUFBQSxFQUFjLFNBQUMsSUFBRDtBQUNaLFVBQUE7TUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYO01BQ1IsSUFBRyxJQUFLLENBQUEsQ0FBQSxDQUFMLEtBQVcsR0FBZDtlQUNFLEtBQUssQ0FBQyxLQUFOLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBaUIsQ0FBQyxJQUFsQixDQUF1QixHQUF2QixFQURGO09BQUEsTUFBQTtlQUdFLEtBQU0sQ0FBQSxDQUFBLEVBSFI7O0lBRlksQ0FWZDs7O0VBa0JGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBaENqQiIsImZpbGUiOiJsaW50ZXIvdXNlZF9tb2R1bGVfZmluZGVyL21vZHVsZV9uYW1lX3BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImJ1aWx0SW5zID0gW1xuICAnYXNzZXJ0JywgJ2J1ZmZlcicsICdjaGlsZF9wcm9jZXNzJywgJ2NsdXN0ZXInLCAnY3J5cHRvJywgJ2RncmFtJywgJ2RucycsICdkb21haW4nLCAnZXZlbnRzJyxcbiAgJ2ZzJywgJ2h0dHAnLCAnaHR0cHMnLCAnbmV0JywgJ29zJywgJ3BhdGgnLCAncHVueWNvZGUnLCAncXVlcnlzdHJpbmcnLCAncmVhZGxpbmUnLCAncmVwbHknLFxuICAnc3RyZWFtJywgJ3N0cmluZ19kZWNvZGVyJywgJ3RscycsICd0dHknLCAndXJsJywgJ3V0aWwnLCAndm0nLCAnemxpYidcbl1cblxuXG5nbG9iYWxFeGVjdXRhYmxlcyA9IFtcbiAgJ25wbSdcbl1cblxuXG5Nb2R1bGVOYW1lUGFyc2VyID1cblxuICBpc0J1aWx0SW46IChuYW1lKSAtPiBuYW1lIGluIGJ1aWx0SW5zXG5cbiAgaXNHbG9iYWxFeGVjdXRhYmxlOiAobmFtZSkgLT4gbmFtZSBpbiBnbG9iYWxFeGVjdXRhYmxlc1xuXG4gIGlzUmVsYXRpdmU6IChuYW1lKSAtPiBuYW1lWzBdIGlzICcuJ1xuXG4gIHN0cmlwTG9hZGVyczogKG5hbWUpIC0+XG4gICAgWy4uLiwgbmFtZV0gPSBuYW1lLnNwbGl0ICchJ1xuICAgIG5hbWVcblxuICBzdHJpcFN1YnBhdGg6IChuYW1lKSAtPlxuICAgIHBhcnRzID0gbmFtZS5zcGxpdCAnLydcbiAgICBpZiBuYW1lWzBdIGlzICdAJ1xuICAgICAgcGFydHMuc2xpY2UoMCwgMikuam9pbiAnLydcbiAgICBlbHNlXG4gICAgICBwYXJ0c1swXVxuXG5cbm1vZHVsZS5leHBvcnRzID0gTW9kdWxlTmFtZVBhcnNlclxuIl19
