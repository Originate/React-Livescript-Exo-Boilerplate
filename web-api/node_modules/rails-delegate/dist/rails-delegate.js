// Generated by LiveScript 1.5.0
var flatten, debug, delegate, delegateEvent, delegateMethod, delegateProperty, _delegateEvent, slice$ = [].slice;
flatten = require('lodash.flatten');
debug = require('debug')('rails-delegate');
delegate = function(){
  var i$, names, res$, j$, ref$, from, to, len$, name, results$ = [];
  res$ = [];
  for (j$ = 0 < (i$ = arguments.length - 1) ? 0 : (i$ = 0); j$ < i$; ++j$) {
    res$.push(arguments[j$]);
  }
  names = res$; ref$ = arguments[i$], from = ref$.from, to = ref$.to;
  switch (false) {
  case !!to:
    throw new Error("Error in rails-delegate: No delegator (to) provided");
  case !!from:
    throw new Error("Error in rails-delegate: No delegate (from) provided");
  }
  for (i$ = 0, len$ = (ref$ = flatten(names)).length; i$ < len$; ++i$) {
    name = ref$[i$];
    switch (typeof to[name]) {
    case 'function':
      results$.push(delegateMethod(from, to, name));
      break;
    case 'undefined':
      throw new Error("Error in rails-delegate: method '" + name + "' not found on the delegate");
    default:
      results$.push(delegateProperty(from, to, name));
    }
  }
  return results$;
};
delegateEvent = function(){
  var i$, names, res$, j$, ref$, from, to, len$, name, results$ = [];
  res$ = [];
  for (j$ = 0 < (i$ = arguments.length - 1) ? 0 : (i$ = 0); j$ < i$; ++j$) {
    res$.push(arguments[j$]);
  }
  names = res$; ref$ = arguments[i$], from = ref$.from, to = ref$.to;
  for (i$ = 0, len$ = (ref$ = flatten(names)).length; i$ < len$; ++i$) {
    name = ref$[i$];
    results$.push(_delegateEvent(name, from, to));
  }
  return results$;
};
delegateMethod = function(from, to, methodName){
  var ref$;
  debug("delegating method '" + methodName + "'");
  return from[methodName] = ((ref$ = to[methodName]) != null ? ref$.bind(to) : void 8) || (function(){
    throw new Error("Error in rails-delegate: method '" + methodName + "' not found on the delegate");
  }());
};
delegateProperty = function(from, to, propertyName){
  debug("delegating property '" + propertyName + "'");
  return Object.defineProperty(from, propertyName, {
    get: function(){
      return to[propertyName];
    }
  });
};
_delegateEvent = function(eventName, from, to){
  var i$, ref$, len$, source, results$ = [];
  debug("delegating event '" + eventName + "'");
  for (i$ = 0, len$ = (ref$ = flatten([from])).length; i$ < len$; ++i$) {
    source = ref$[i$];
    results$.push(source.on(eventName, fn$));
  }
  return results$;
  function fn$(){
    var params, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    params = res$;
    return to.emit.apply(to, [eventName].concat(slice$.call(params)));
  }
};
module.exports = {
  delegate: delegate,
  delegateEvent: delegateEvent
};