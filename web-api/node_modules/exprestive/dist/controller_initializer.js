// Generated by CoffeeScript 1.10.0
(function() {
  var ControllerInitializer, camelCase, glob, path;

  camelCase = require('camel-case');

  glob = require('glob');

  path = require('path');

  ControllerInitializer = (function() {
    function ControllerInitializer(arg) {
      this.appDir = arg.appDir, this.controllersPattern = arg.controllersPattern, this.dependencies = arg.dependencies, this.reverseRoutes = arg.reverseRoutes;
      this.controllers = {};
      this.initializeControllers();
      this.middlewareContext = {
        routes: this.reverseRoutes
      };
    }

    ControllerInitializer.prototype.applyAction = function(arg) {
      var actionName, controller, controllerName, next, ref, req, res;
      controllerName = arg.controllerName, actionName = arg.actionName, (ref = arg.args, req = ref[0], res = ref[1], next = ref[2]);
      controller = this.controllers[camelCase(controllerName)];
      if (!controller) {
        return next("Missing '" + controllerName + "' controller");
      }
      if (typeof controller[actionName] !== 'function') {
        return next("Missing '" + actionName + "' action in '" + controllerName + "' controller");
      }
      return controller[actionName](req, res, next);
    };

    ControllerInitializer.prototype.initializeControllers = function() {
      var Controller, controllerName, fileName, filePath, i, len, ref, results;
      ref = glob.sync(this.controllersPattern, {
        cwd: this.appDir
      });
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        fileName = ref[i];
        filePath = path.join(this.appDir, fileName);
        Controller = require(filePath);
        Controller.prototype.routes = this.reverseRoutes;
        controllerName = camelCase(Controller.name.replace(/Controller$/, ''));
        results.push(this.controllers[controllerName] = new Controller(this.dependencies));
      }
      return results;
    };

    ControllerInitializer.prototype.middlewareFor = function(arg) {
      var actionName, controller, controllerName;
      controllerName = arg.controllerName, actionName = arg.actionName;
      controller = this.controllers[camelCase(controllerName)];
      return this.getMiddlewareFunctions({
        controller: controller,
        actionName: actionName
      }).map((function(_this) {
        return function(middleware) {
          return middleware.bind(_this.middlewareContext);
        };
      })(this));
    };

    ControllerInitializer.prototype.getMiddlewareFunctions = function(arg) {
      var actionName, controller, ref;
      controller = arg.controller, actionName = arg.actionName;
      if (controller == null) {
        return [];
      }
      if (typeof controller[actionName] !== 'function') {
        return [];
      }
      if (((ref = controller.middleware) != null ? ref[actionName] : void 0) == null) {
        return [];
      }
      return [].concat(controller.middleware[actionName]);
    };

    return ControllerInitializer;

  })();

  module.exports = ControllerInitializer;

}).call(this);
