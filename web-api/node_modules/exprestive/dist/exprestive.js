// Generated by CoffeeScript 1.10.0
(function() {
  var ControllerInitializer, Exprestive, RoutesInitializer, _, express, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  _ = require('lodash');

  ControllerInitializer = require('./controller_initializer');

  express = require('express');

  path = require('path');

  RoutesInitializer = require('./routes_initializer');

  Exprestive = (function() {
    Exprestive.defaultOptions = {
      appDir: '',
      routesFilePath: 'routes',
      controllersPattern: 'controllers/*controller.+([^.])',
      dependencies: {}
    };

    function Exprestive(baseDir, options) {
      var i, len, ref, route, routes;
      this.options = options != null ? options : {};
      this.setReverseRoutesOnReqLocals = bind(this.setReverseRoutesOnReqLocals, this);
      this.addRoute = bind(this.addRoute, this);
      _.defaults(this.options, Exprestive.defaultOptions);
      this.options.appDir = path.resolve(baseDir, this.options.appDir);
      this.options.routesFilePath = path.resolve(this.options.appDir, this.options.routesFilePath);
      this.middlewareRouter = express.Router();
      this.reverseRoutes = {};
      this.middlewareRouter.use(this.setReverseRoutesOnReqLocals);
      routes = new RoutesInitializer(this.options.routesFilePath, this.reverseRoutes);
      this.controllers = new ControllerInitializer(_.extend({}, this.options, {
        reverseRoutes: this.reverseRoutes
      }));
      ref = routes.toArray();
      for (i = 0, len = ref.length; i < len; i++) {
        route = ref[i];
        this.addRoute(route);
      }
    }

    Exprestive.prototype.addRoute = function(arg) {
      var actionName, controllerName, httpMethod, middleware, ref, url;
      httpMethod = arg.httpMethod, url = arg.url, controllerName = arg.controllerName, actionName = arg.actionName;
      middleware = this.controllers.middlewareFor({
        controllerName: controllerName,
        actionName: actionName
      });
      return (ref = this.middlewareRouter)[httpMethod.toLowerCase()].apply(ref, [url].concat(slice.call(middleware), [(function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.controllers.applyAction({
            controllerName: controllerName,
            actionName: actionName,
            args: args
          });
        };
      })(this)]));
    };

    Exprestive.prototype.setReverseRoutesOnReqLocals = function(req, res, next) {
      if (res.locals != null) {
        res.locals.routes = this.reverseRoutes;
      }
      return next();
    };

    return Exprestive;

  })();

  module.exports = Exprestive;

}).call(this);
