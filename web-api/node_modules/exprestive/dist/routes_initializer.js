// Generated by CoffeeScript 1.10.0
(function() {
  var HTTP_METHODS, RESOURCE_ACTIONS, RoutesInitializer, URLFormatter, _, camelCase, pluralize, ref, singularize,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  camelCase = require('camel-case');

  ref = require('inflection'), pluralize = ref.pluralize, singularize = ref.singularize;

  URLFormatter = require('./url_formatter');

  HTTP_METHODS = ['GET', 'POST', 'PUT', 'DELETE'];

  RESOURCE_ACTIONS = ['index', 'new', 'show', 'edit', 'update', 'create', 'destroy'];

  RoutesInitializer = (function() {
    function RoutesInitializer(routesFile, reverseRoutes) {
      this.routesFile = routesFile;
      this.reverseRoutes = reverseRoutes;
      this.scopeDirective = bind(this.scopeDirective, this);
      this.resourcesDirective = bind(this.resourcesDirective, this);
      this._routes = [];
      this._scope = [];
      require(this.routesFile)(this.getRouteDirectives());
    }

    RoutesInitializer.prototype.getHttpDirective = function(httpMethod) {
      return (function(_this) {
        return function(url, arg) {
          var actionName, as, controllerName, ref1, to;
          to = arg.to, as = arg.as;
          url = _this._normalizeUrl((_this._scope.join('/')) + "/" + url);
          ref1 = to.split('#'), controllerName = ref1[0], actionName = ref1[1];
          _this._routes.push({
            httpMethod: httpMethod,
            url: url,
            controllerName: controllerName,
            actionName: actionName
          });
          if (as != null) {
            return _this.registerReverseRoute({
              routeName: as,
              httpMethod: httpMethod,
              url: url
            });
          }
        };
      })(this);
    };

    RoutesInitializer.prototype.getRouteDirectives = function() {
      var directives, httpMethod, i, len;
      directives = {
        resources: this.resourcesDirective,
        scope: this.scopeDirective
      };
      for (i = 0, len = HTTP_METHODS.length; i < len; i++) {
        httpMethod = HTTP_METHODS[i];
        directives[httpMethod] = this.getHttpDirective(httpMethod);
      }
      return directives;
    };

    RoutesInitializer.prototype.registerReverseRoute = function(arg) {
      var formatter, httpMethod, routeName, url;
      routeName = arg.routeName, httpMethod = arg.httpMethod, url = arg.url;
      formatter = new URLFormatter(url);
      return this.reverseRoutes[routeName] = function() {
        return formatter.getRoute(httpMethod, arguments);
      };
    };

    RoutesInitializer.prototype.resourceMappings = function(controllerName) {
      var DELETE, GET, POST, PUT, pluralName, ref1, singularName;
      ref1 = this.getRouteDirectives(), GET = ref1.GET, POST = ref1.POST, PUT = ref1.PUT, DELETE = ref1.DELETE;
      singularName = singularize(controllerName);
      pluralName = pluralize(controllerName);
      return {
        index: function() {
          return GET("/" + controllerName, {
            to: controllerName + "#index",
            as: pluralName
          });
        },
        "new": function() {
          return GET("/" + controllerName + "/new", {
            to: controllerName + "#new",
            as: camelCase("new_" + singularName)
          });
        },
        show: function() {
          return GET("/" + controllerName + "/:id", {
            to: controllerName + "#show",
            as: singularName
          });
        },
        edit: function() {
          return GET("/" + controllerName + "/:id/edit", {
            to: controllerName + "#edit",
            as: camelCase("edit_" + singularName)
          });
        },
        update: function() {
          return PUT("/" + controllerName + "/:id", {
            to: controllerName + "#update",
            as: camelCase("update_" + singularName)
          });
        },
        create: function() {
          return POST("/" + controllerName, {
            to: controllerName + "#create",
            as: camelCase("create_" + singularName)
          });
        },
        destroy: function() {
          return DELETE("/" + controllerName + "/:id", {
            to: controllerName + "#destroy",
            as: camelCase("destroy_" + singularName)
          });
        }
      };
    };

    RoutesInitializer.prototype.resourcesDirective = function(controllerName, arg) {
      var action, except, i, includedActions, len, mappings, only, ref1, results;
      ref1 = arg != null ? arg : {}, except = ref1.except, only = ref1.only;
      includedActions = except != null ? _.difference(RESOURCE_ACTIONS, except) : only != null ? _.intersection(RESOURCE_ACTIONS, only) : RESOURCE_ACTIONS;
      mappings = this.resourceMappings(controllerName);
      results = [];
      for (i = 0, len = includedActions.length; i < len; i++) {
        action = includedActions[i];
        results.push(mappings[action]());
      }
      return results;
    };

    RoutesInitializer.prototype.scopeDirective = function(scopeName, scopedRoutes) {
      this._scope.push(scopeName);
      scopedRoutes();
      return this._scope.pop(scopeName);
    };

    RoutesInitializer.prototype.toArray = function() {
      return this._routes;
    };

    RoutesInitializer.prototype._normalizeUrl = function(path) {
      return "/" + (_.compact(path.split('/')).join('/'));
    };

    return RoutesInitializer;

  })();

  module.exports = RoutesInitializer;

}).call(this);
