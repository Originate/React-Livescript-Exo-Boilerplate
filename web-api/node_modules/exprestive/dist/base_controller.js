// Generated by CoffeeScript 1.10.0
(function() {
  var BaseController,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseController = (function() {
    function BaseController() {}

    BaseController.prototype.useMiddleware = function(middleware, options) {
      var action, base, i, len, ref, results;
      if (options == null) {
        options = {};
      }
      ref = this.getActions(options);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        action = ref[i];
        if (this.middleware == null) {
          this.middleware = {};
        }
        if ((base = this.middleware)[action] == null) {
          base[action] = [];
        }
        results.push(this.middleware[action] = [].concat(this.middleware[action], middleware));
      }
      return results;
    };

    BaseController.prototype.getActions = function(arg) {
      var action, except, i, len, only, ref, ref1, results;
      ref = arg != null ? arg : {}, only = ref.only, except = ref.except;
      only = [].concat(only != null ? only : []);
      except = [].concat(except != null ? except : []);
      ref1 = Object.getOwnPropertyNames(this.constructor.prototype);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        action = ref1[i];
        if (typeof this.constructor.prototype[action] !== 'function') {
          continue;
        }
        if (action === 'constructor') {
          continue;
        }
        if (action.indexOf('_') === 0) {
          continue;
        }
        if (!(indexOf.call(only, action) >= 0 || only.length === 0)) {
          continue;
        }
        if (indexOf.call(except, action) >= 0) {
          continue;
        }
        results.push(action);
      }
      return results;
    };

    return BaseController;

  })();

  module.exports = BaseController;

}).call(this);
