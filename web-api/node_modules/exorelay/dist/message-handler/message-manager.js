// Generated by LiveScript 1.5.0
var EventEmitter, HandlerRegistry, ref$, delegate, delegateEvent, debug, HandlerManager;
EventEmitter = require('events').EventEmitter;
HandlerRegistry = require('./handler-registry');
ref$ = require('rails-delegate'), delegate = ref$.delegate, delegateEvent = ref$.delegateEvent;
debug = require('debug')('exorelay:message-manager');
HandlerManager = (function(superclass){
  var prototype = extend$((import$(HandlerManager, superclass).displayName = 'HandlerManager', HandlerManager), superclass).prototype, constructor = HandlerManager;
  function HandlerManager(){
    this.commandHandlers = new HandlerRegistry('message-handler');
    this.replyHandlers = new HandlerRegistry('reply-handler');
    delegate('hasHandler', 'registerHandler', 'registerHandlers', {
      from: this,
      to: this.commandHandlers
    });
    delegateEvent('error', {
      from: [this.commandHandlers, this.replyHandlers],
      to: this
    });
  }
  HandlerManager.prototype.handleRequest = function(messageData, methods){
    switch (false) {
    case !!messageData.id:
      return 'missing message id';
    case !this.replyHandlers.handleReply(messageData):
      return 'success';
    case !this.commandHandlers.handleCommand(messageData, methods):
      return 'success';
    default:
      return 'unknown message';
    }
  };
  HandlerManager.prototype.registerReplyHandler = function(messageId, handler){
    return this.replyHandlers.registerHandler(messageId, handler);
  };
  return HandlerManager;
}(EventEmitter));
module.exports = HandlerManager;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}