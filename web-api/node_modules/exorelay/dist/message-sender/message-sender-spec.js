// Generated by LiveScript 1.5.0
var MessageSender, expect, sinon;
MessageSender = require('./message-sender');
expect = require('chai').expect;
sinon = require('sinon');
describe('MessageSender', function(){
  beforeEach(function(){
    var x$, this$ = this;
    x$ = this.messageSender = new MessageSender({
      exocomPort: 4100,
      serviceName: 'test'
    });
    x$.on('error', function(error){
      this$.error = error;
    });
    return x$;
  });
  afterEach(function(){
    return this.messageSender.closePort();
  });
  return describe('reply-method-for', function(){
    beforeEach(function(){
      this.messageSender.send = sinon.stub();
      return this.replyMethod = this.messageSender.replyMethodFor('123');
    });
    it('returns a function', function(){
      return expect(typeof this.replyMethod).to.equal('function');
    });
    it('calls @send', function(){
      this.replyMethod();
      return expect(this.messageSender.send.called).to.be['true'];
    });
    it('pre-populates the id', function(){
      this.replyMethod('reply-message', 'payload');
      return expect(this.messageSender.send.firstCall.args).to.eql([
        'reply-message', 'payload', {
          responseTo: '123'
        }
      ]);
    });
    return context('missing id', function(){
      beforeEach(function(){
        return this.messageSender.replyMethodFor(null);
      });
      return it('emits an error', function(done){
        expect(this.error.message).to.eql('MessageSender.replyMethodFor needs a id');
        return done();
      });
    });
  });
});