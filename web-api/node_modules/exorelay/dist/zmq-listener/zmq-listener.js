// Generated by LiveScript 1.5.0
var EventEmitter, zmq, debug, ZmqListener;
EventEmitter = require('events').EventEmitter;
zmq = require('zmq');
debug = require('debug')('exorelay:zmq-listener');
ZmqListener = (function(superclass){
  var prototype = extend$((import$(ZmqListener, superclass).displayName = 'ZmqListener', ZmqListener), superclass).prototype, constructor = ZmqListener;
  function ZmqListener(){
    this.onZmqSocketMessage = bind$(this, 'onZmqSocketMessage', prototype);
    this.zmqSocket = null;
    this.port = null;
  }
  ZmqListener.prototype.close = function(){
    if (!this.zmqSocket) {
      return;
    }
    debug("no longer listening at port " + this.port);
    this.zmqSocket.close();
    this.zmqSocket = null;
    this.port = null;
    return this.emit('offline');
  };
  ZmqListener.prototype.listen = function(port){
    var x$, e, this$ = this;
    this.port = +port;
    switch (false) {
    case !isNaN(this.port):
      return this.emit('error', Error('Non-numerical port provided to ExoRelay#listen'));
    }
    x$ = this.zmqSocket = zmq.socket('pull');
    x$.on('message', this.onZmqSocketMessage);
    x$.on('bind_error', function(file_descriptor, endpoint){
      return this$.emit('error', "port " + endpoint.substring(2) + " for ExoRelay is already in use");
    });
    x$.monitor(500);
    try {
      this.zmqSocket.bindSync("tcp://*:" + this.port);
      return this.emit('online', this.port);
    } catch (e$) {
      e = e$;
      return console.log(e.message);
    }
  };
  ZmqListener.prototype.onZmqSocketMessage = function(data){
    var requestData, result;
    requestData = this._parseRequest(JSON.parse(data.toString()));
    this._log(requestData);
    switch (result = this.listeners('message')[0](requestData)) {
    case 'success':
      break;
    case 'missing message id':
      return this.emit('error', Error('missing message id'));
    case 'unknown message':
      return this.emit('error', Error("unknown message: '" + requestData.messageName + "'"));
    default:
      return this.emit('error', Error("unknown result code: '" + this.result + "'"));
    }
  };
  ZmqListener.prototype._log = function(arg$){
    var messageName, id, responseTo;
    messageName = arg$.messageName, id = arg$.id, responseTo = arg$.responseTo;
    switch (false) {
    case !responseTo:
      return debug("received message '" + messageName + "' with id '" + id + "' in response to '" + responseTo + "'");
    default:
      return debug("received message '" + messageName + "' with id '" + id + "'");
    }
  };
  ZmqListener.prototype._parseRequest = function(req){
    var messageName, payload, responseTo, id;
    messageName = req.name;
    payload = req.payload;
    responseTo = req.responseTo;
    id = req.id;
    return {
      messageName: messageName,
      responseTo: responseTo,
      payload: payload,
      id: id
    };
  };
  return ZmqListener;
}(EventEmitter));
module.exports = ZmqListener;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}